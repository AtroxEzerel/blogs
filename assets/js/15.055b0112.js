(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{569:function(_,v,t){"use strict";t.r(v);var a=t(17),r=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_6-运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-运算符"}},[_._v("#")]),_._v(" 6.运算符")]),_._v(" "),t("ul",[t("li",[_._v("能够使用常用运算符")]),_._v(" "),t("li",[_._v("能够说出前置递增和后置递增的区别")]),_._v(" "),t("li",[_._v("能够说出运算符的优先级")])]),_._v(" "),t("h3",{attrs:{id:"_1-运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-运算符"}},[_._v("#")]),_._v(" 1.运算符")]),_._v(" "),t("ul",[t("li",[_._v("运算符( operator )也被称为操作符，是用于实现赋值、比较和执行算数运算等功能的符号。")]),_._v(" "),t("li",[_._v("JavaScript中常用的运算符有∶\n"),t("ul",[t("li",[_._v("算数运算符")]),_._v(" "),t("li",[_._v("递增和递减运算符")]),_._v(" "),t("li",[_._v("比较运算符")]),_._v(" "),t("li",[_._v("逻辑运算符")]),_._v(" "),t("li",[_._v("赋值运算符")])])])]),_._v(" "),t("h3",{attrs:{id:"_2-算数运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-算数运算符"}},[_._v("#")]),_._v(" 2.算数运算符")]),_._v(" "),t("h4",{attrs:{id:"_2-1算数运算符概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1算数运算符概述"}},[_._v("#")]),_._v(" 2.1算数运算符概述")]),_._v(" "),t("ul",[t("li",[_._v("概念:算术运算使用的符号，用于执行两个变量或值的算术运算。\n| 运算符 | 说明                  |案例|\n| ------ | ------------------------- |---|\n| + | 加 |10+20=30|\n| - | 减 | 10-20=-10 |\n| * | 乘 |10*20=200|\n| / | 除 |10/20=0.5|\n| %| 取模 |9%2=1|")])]),_._v(" "),t("h4",{attrs:{id:"_2-2浮点数的精度问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2浮点数的精度问题"}},[_._v("#")]),_._v(" 2.2浮点数的精度问题")]),_._v(" "),t("ul",[t("li",[_._v("浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。")])]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("var result = 0.1 + 0.2;//结果不是0.3，而是:0.30000000000000004\nconsole.log (0.07 * 100);//结果不是7，而是∶7.000000000000001\n")])])]),t("ul",[t("li",[_._v("所以∶不要直接判断两个浮点数是否相等!")])]),_._v(" "),t("h4",{attrs:{id:"_2-3注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3注意"}},[_._v("#")]),_._v(" 2.3注意")]),_._v(" "),t("ul",[t("li",[_._v("它的余数是0就说明这个数能被整除，这就是%取余运算符的主要用途")]),_._v(" "),t("li",[_._v("注意算术运算符优先级的，先乘除，后加减，有小括号先算小括号里面的")])]),_._v(" "),t("h4",{attrs:{id:"_2-4表达式和返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4表达式和返回值"}},[_._v("#")]),_._v(" 2.4表达式和返回值")]),_._v(" "),t("ul",[t("li",[_._v("表达式∶是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合")]),_._v(" "),t("li",[_._v("简单理解︰是由数字、运算符、变量等组成的式子")])]),_._v(" "),t("h3",{attrs:{id:"_3-递增和递减运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-递增和递减运算符"}},[_._v("#")]),_._v(" 3.递增和递减运算符")]),_._v(" "),t("h4",{attrs:{id:"_3-1递增和递减运算符概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1递增和递减运算符概述"}},[_._v("#")]),_._v(" 3.1递增和递减运算符概述")]),_._v(" "),t("ul",[t("li",[_._v("如果需要反复给数字变量添加或减去1，可以使用递增(++)和递减(--)运算符来完成。")]),_._v(" "),t("li",[_._v("在JavaScript中，递增（++)和递减(-- )既可以放在变量前面，也可以放在变量后面。")]),_._v(" "),t("li",[_._v("放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。")])]),_._v(" "),t("p",[_._v("注意：递增和递减运算符必须和变量配合使用")]),_._v(" "),t("h4",{attrs:{id:"_3-2递增运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2递增运算符"}},[_._v("#")]),_._v(" 3.2递增运算符")]),_._v(" "),t("h5",{attrs:{id:"_1-前置递增运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-前置递增运算符"}},[_._v("#")]),_._v(" 1.前置递增运算符")]),_._v(" "),t("ul",[t("li",[_._v("++num前置递增，就是自加1，类似于num = num + 1，但是++num写起来更简单。")]),_._v(" "),t("li",[_._v("先自加后返回")])]),_._v(" "),t("h5",{attrs:{id:"_2-后置递增运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-后置递增运算符"}},[_._v("#")]),_._v(" 2.后置递增运算符")]),_._v(" "),t("ul",[t("li",[_._v("num++后置递增，就是自加1，类似于num = num +1，但是num++写起来更简单。")]),_._v(" "),t("li",[_._v("先返回原值，后自加")])]),_._v(" "),t("p",[_._v("前置自增和后置自增如果单独使用效果是一样的")]),_._v(" "),t("h5",{attrs:{id:"_3-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[_._v("#")]),_._v(" 3.总结")]),_._v(" "),t("ul",[t("li",[_._v("前置递增和后置递增运算符可以简化代码的编写，让变量的值+1比以前写法更简单")]),_._v(" "),t("li",[_._v("单独使用时，运行结果相同")]),_._v(" "),t("li",[_._v("与其他代码联用时，执行结果会不同")]),_._v(" "),t("li",[_._v("后置:先原值运算，后自加(先人后己)")]),_._v(" "),t("li",[_._v("前置:先自加，后运算(先已后人)")]),_._v(" "),t("li",[_._v("开发时，大多使用后置递增/减，并且代码独占一行，例如:num++;或者num--;")])]),_._v(" "),t("h3",{attrs:{id:"_4-比较运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较运算符"}},[_._v("#")]),_._v(" 4.比较运算符")]),_._v(" "),t("h4",{attrs:{id:"_4-1比较运算符概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1比较运算符概述"}},[_._v("#")]),_._v(" 4.1比较运算符概述")]),_._v(" "),t("p",[_._v("概念︰比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值( true / false )作为比较运算的结果。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("运算符名称")]),_._v(" "),t("th",[_._v("说明")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("<")]),_._v(" "),t("td",[_._v("小于号")])]),_._v(" "),t("tr",[t("td",[_._v(">")]),_._v(" "),t("td",[_._v("大于号")])]),_._v(" "),t("tr",[t("td",[_._v(">=")]),_._v(" "),t("td",[_._v("大于等于号")])]),_._v(" "),t("tr",[t("td",[_._v("<=")]),_._v(" "),t("td",[_._v("小于等于号")])]),_._v(" "),t("tr",[t("td",[_._v("==")]),_._v(" "),t("td",[_._v("判等号（会转型）")])]),_._v(" "),t("tr",[t("td",[_._v("!=")]),_._v(" "),t("td",[_._v("不等号")])]),_._v(" "),t("tr",[t("td",[_._v("=== !==")]),_._v(" "),t("td",[_._v("全等 要求值和数据类型一致")])])])]),_._v(" "),t("h4",{attrs:{id:"_4-2总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2总结"}},[_._v("#")]),_._v(" 4.2总结")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("符号")]),_._v(" "),t("th",[_._v("作用")]),_._v(" "),t("th",[_._v("用法")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("=")]),_._v(" "),t("td",[_._v("赋值")]),_._v(" "),t("td",[_._v("把右边给左边")])]),_._v(" "),t("tr",[t("td",[_._v("==")]),_._v(" "),t("td",[_._v("判断")]),_._v(" "),t("td",[_._v("判断两边值是否相等（注意此时有隐式转换）")])]),_._v(" "),t("tr",[t("td",[_._v("===")]),_._v(" "),t("td",[_._v("全等")]),_._v(" "),t("td",[_._v("判断两边的值和数据类型是否完全相同")])])])]),_._v(" "),t("h3",{attrs:{id:"_5-逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-逻辑运算符"}},[_._v("#")]),_._v(" 5.逻辑运算符")]),_._v(" "),t("h5",{attrs:{id:"_5-1逻辑运算符概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1逻辑运算符概述"}},[_._v("#")]),_._v(" 5.1逻辑运算符概述")]),_._v(" "),t("p",[_._v("概念∶逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("逻辑运算符")]),_._v(" "),t("th",[_._v("说明")]),_._v(" "),t("th",[_._v("案例")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("&&")]),_._v(" "),t("td",[_._v("逻辑与=>与 and")]),_._v(" "),t("td",[_._v("true && false")])]),_._v(" "),t("tr",[t("td",[_._v("||")]),_._v(" "),t("td",[_._v("逻辑或=>或 or")]),_._v(" "),t("td",[_._v("true || false")])]),_._v(" "),t("tr",[t("td",[_._v("!")]),_._v(" "),t("td",[_._v("逻辑非=>非 not")]),_._v(" "),t("td",[_._v("!true")])])])]),_._v(" "),t("h5",{attrs:{id:"_5-2逻辑与"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2逻辑与"}},[_._v("#")]),_._v(" 5.2逻辑与&&")]),_._v(" "),t("p",[_._v("两边都是true才返回true，否则返回false")]),_._v(" "),t("h5",{attrs:{id:"_5-3逻辑或"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3逻辑或"}},[_._v("#")]),_._v(" 5.3逻辑或 ||")]),_._v(" "),t("p",[_._v("两边都为false才返回false，否则都为true")]),_._v(" "),t("h5",{attrs:{id:"_5-4逻辑非"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4逻辑非"}},[_._v("#")]),_._v(" 5.4逻辑非 ！")]),_._v(" "),t("p",[_._v("逻辑非(!)也叫作取反符，用来取一个布尔值相反的值，如true的相反值是false")]),_._v(" "),t("h5",{attrs:{id:"_5-5短路运算-逻辑中断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-5短路运算-逻辑中断"}},[_._v("#")]),_._v(" 5.5短路运算（逻辑中断）")]),_._v(" "),t("ul",[t("li",[_._v("短路运算的原理︰当有多个表达式(值)时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值")]),_._v(" "),t("li",[_._v("1.逻辑与\n"),t("ul",[t("li",[_._v("语法∶表达式1&&表达式2")]),_._v(" "),t("li",[_._v("如果第一个表达式的值为真，则返回表达式2如果第一个表达式的值为假，则返回表达式1")])])]),_._v(" "),t("li",[_._v("逻辑或\n"),t("ul",[t("li",[_._v("语法:表达式1||表达式2")]),_._v(" "),t("li",[_._v("如果第一个表达式的值为真，则返回表达式1如果第一个表达式的值为假，则返回表达式2")])])])]),_._v(" "),t("h3",{attrs:{id:"_6-赋值运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-赋值运算符"}},[_._v("#")]),_._v(" 6.赋值运算符")]),_._v(" "),t("p",[t("strong",[_._v("概念：用来把数据赋值给变量的运算符")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("赋值运算符")]),_._v(" "),t("th",[_._v("说明")]),_._v(" "),t("th",[_._v("案例")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("=")]),_._v(" "),t("td",[_._v("直接赋值")]),_._v(" "),t("td",[_._v("var user='xx'")])]),_._v(" "),t("tr",[t("td",[_._v("+= -=")]),_._v(" "),t("td",[_._v("加、减一个数后再赋值")]),_._v(" "),t("td",[_._v("var age =10 ;age+=5")])]),_._v(" "),t("tr",[t("td",[_._v("*= /= %=")]),_._v(" "),t("td",[_._v("乘、除、取模后再赋值")]),_._v(" "),t("td",[_._v("var age = 2; age*=5")])])])]),_._v(" "),t("h3",{attrs:{id:"_7-运算符优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-运算符优先级"}},[_._v("#")]),_._v(" 7.运算符优先级")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("优先级")]),_._v(" "),t("th",[_._v("运算符")]),_._v(" "),t("th",[_._v("顺序")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("1")]),_._v(" "),t("td",[_._v("小括号")]),_._v(" "),t("td",[_._v("()")])]),_._v(" "),t("tr",[t("td",[_._v("2")]),_._v(" "),t("td",[_._v("一元运算符")]),_._v(" "),t("td",[_._v("++ -- ！")])]),_._v(" "),t("tr",[t("td",[_._v("3")]),_._v(" "),t("td",[_._v("算数运算符")]),_._v(" "),t("td",[_._v("先 * / % 后 + -")])]),_._v(" "),t("tr",[t("td",[_._v("4")]),_._v(" "),t("td",[_._v("关系运算符")]),_._v(" "),t("td",[_._v("> >= < <=")])]),_._v(" "),t("tr",[t("td",[_._v("5")]),_._v(" "),t("td",[_._v("相等运算符")]),_._v(" "),t("td",[_._v("== != === !==")])]),_._v(" "),t("tr",[t("td",[_._v("6")]),_._v(" "),t("td",[_._v("逻辑运算符")]),_._v(" "),t("td",[_._v("先&&后||")])]),_._v(" "),t("tr",[t("td",[_._v("7")]),_._v(" "),t("td",[_._v("赋值运算符")]),_._v(" "),t("td",[_._v("=")])]),_._v(" "),t("tr",[t("td",[_._v("8")]),_._v(" "),t("td",[_._v("逗号运算符")]),_._v(" "),t("td",[_._v(",")])])])]),_._v(" "),t("ul",[t("li",[_._v("一元运算符里面的逻辑非优先级很高")]),_._v(" "),t("li",[_._v("逻辑与比逻辑或优先级高\n"),t("LastUpdated")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);